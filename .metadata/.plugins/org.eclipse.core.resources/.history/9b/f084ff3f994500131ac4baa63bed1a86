package RGI;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;

import weka.classifiers.meta.FilteredClassifier;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.DenseInstance;

public class RGIClassifier {
	
	/**
     * String that stores the text to classify
     */
    String text;
    /**
     * Object that stores the instance.
     */
    Instances instances;
    /**
     * Object that stores the classifier.
     */
    FilteredClassifier classifier;

	 /**
     * This method loads the text to be classified.
     * @param fileName The name of the file that stores the text.
     */
    public void load(String fileName) {
    	try{
    		BufferedReader reader = new BufferedReader(new FileReader(fileName));
    		String line;
    		text = " ";
    		while ((line = reader.readLine()) != -1){
    			text = text + " " + line;
    		}
    		reader.close();
    	} catch (IOException e) {
    		System.out.println("Problem reading the file");
    	}
    }
	
    /**
     * This method loads the model to be used as classifier.
     * @param fileName The name of the file that stores the text.
     */
    public void loadModel(String fileName) {
            try {
                    ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
        Object tmp = in.readObject();
                    classifier = (FilteredClassifier) tmp;
        in.close();
                     System.out.println("===== Loaded model: " + fileName + " =====");
   }
            catch (Exception e) {
                    // Given the cast, a ClassNotFoundException must be caught along with the IOException
                    System.out.println("Problem found when reading: " + fileName);
            }
    }
    
    /**
     * This method creates the instance to be classified, from the text that has been read.
     */
    public void makeInstance() {
            // Create the attributes, class and text
            List<String> fvNominalVal = new ArrayList<String>(2);
            fvNominalVal.add("pos");
            fvNominalVal.add("neg");
            Attribute attribute1 = new Attribute("text",(ArrayList<String>) null);
            Attribute attribute2 = new Attribute("class", fvNominalVal);
            // Create list of instances with one element
            List<Attribute> fvWekaAttributes = new ArrayList<Attribute>(2);
            fvWekaAttributes.add(attribute1);
            fvWekaAttributes.add(attribute2);
            instances = new Instances("Test relation", (ArrayList<Attribute>) fvWekaAttributes, 1);
            // Set class index
            instances.setClassIndex(1);
            // Create and add the instance
            DenseInstance instance = new DenseInstance(2);
            instance.setValue(attribute1, text);
            // Another way to do it:
            // instance.setValue((Attribute)fvWekaAttributes.elementAt(1), text);
            instances.add(instance);
            System.out.println("===== Instance created with reference dataset =====");
            System.out.println(instances);
    }
    
    /**
     * This method performs the classification of the instance.
     * Output is done at the command-line.
     */
    public void classify() {
            try {
                    double pred = classifier.classifyInstance(instances.instance(0));
                    System.out.println("===== Classified instance =====");
                    System.out.println("Class predicted: " + instances.classAttribute().value((int) pred));
            }
            catch (Exception e) {
                    System.out.println("Problem found when classifying the text");
            }                
    }
    
    
	public static void main(String[] args) {
		RGIClassifier classifier;
		if (args.length < 2)
            System.out.println("Usage: java RGIClassifier <fileData> <fileModel>");
		else {
			classifier = new RGIClassifier();
			classifier.load(args[0]);
            classifier.loadModel(args[1]);
            classifier.makeInstance();
            classifier.classify();
		}
		
		
	}

}
