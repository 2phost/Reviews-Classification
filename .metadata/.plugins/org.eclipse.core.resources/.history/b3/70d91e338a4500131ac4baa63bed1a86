package RGI;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;

import weka.classifiers.meta.FilteredClassifier;
import weka.core.Attribute;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;

public class RGIClassifier {
	
	/**
     * String that stores the text to classify
     */
    String text;
    /**
     * Object that stores the instance.
     */
    Instances instances;
    /**
     * Object that stores the classifier.
     */
    FilteredClassifier classifier;

	 /**
     * This method loads the text to be classified.
     * @param fileName The name of the file that stores the text.
     */
    public void load(String fileName) {
    	try{
    		BufferedReader reader = new BufferedReader(new FileReader(fileName));
    		String line;
    		text = " ";
    		while ((line = reader.readLine()) != null){
    			text = text + " " + line;
    		}
    		reader.close();
    	} catch (IOException e) {
    		System.out.println("Problem reading the file");
    	}
    }
	
    /**
     * This method loads the model to be used as classifier.
     * @param fileName The name of the file that stores the text.
     */
    public void loadModel(String fileName) {
            try {
                    ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
        Object tmp = in.readObject();
                    classifier = (FilteredClassifier) tmp;
        in.close();
                     System.out.println("===== Loaded model: " + fileName + " =====");
   }
            catch (Exception e) {
                    // Given the cast, a ClassNotFoundException must be caught along with the IOException
                    System.out.println("Problem found when reading: " + fileName);
            }
    }
    
	public static void main(String[] args) {
		RGIClassifier classifier;
		if (args.length < 2)
            System.out.println("Usage: java RGIClassifier <fileData> <fileModel>");
		else {
			classifier = new RGIClassifier();
			classifier.load(args[0]);
            classifier.loadModel(args[1]);
            classifier.makeInstance();
            classifier.classify();
		}
		
		
	}

}
